[
  {
    "deprecationMessage": "Use a formatter like Prettier for formatting purposes.",
    "description": "Ensures the proper formatting of Angular expressions.",
    "hasFix": true,
    "optionExamples": [
      [true, "check-interpolation"],
      [true, "check-pipe"],
      [true, "check-semicolon"],
      [true, "check-interpolation", "check-pipe", "check-semicolon"]
    ],
    "options": {
      "items": {
        "enum": ["check-interpolation", "check-pipe", "check-semicolon"],
        "type": "string"
      },
      "maxLength": 3,
      "minLength": 1,
      "type": "array"
    },
    "optionsDescription": "\nOne (or both) of the following arguments must be provided:\n* `check-interpolation` - checks for whitespace before and after the interpolation characters.\n* `check-pipe` - checks for whitespace before and after a pipe.\n* `check-semicolon` - checks for whitespace after semicolon.\n    ",
    "rationale": "Having whitespace in the right places in an Angular expression makes the template more readable.",
    "ruleName": "angular-whitespace",
    "type": "style",
    "typescriptOnly": true
  },
  {
    "description": "Classes decorated with @Component must have suffix \"Component\" (or custom) in their name.",
    "descriptionDetails": "See more at https://angular.io/styleguide#style-02-03.",
    "optionExamples": [true, [true, "Component", "View"]],
    "options": {
      "items": {
        "type": "string"
      },
      "minLength": 0,
      "type": "array"
    },
    "optionsDescription": "Supply a list of allowed component suffixes. Defaults to \"Component\".",
    "rationale": "Consistent conventions make it easy to quickly identify and reference assets of different types.",
    "ruleName": "component-class-suffix",
    "type": "style",
    "typescriptOnly": true
  },
  {
    "description": "Disallows having too many lines in inline template and styles. Forces separate template or styles file creation.",
    "descriptionDetails": "See more at https://angular.io/guide/styleguide#style-05-04..",
    "optionExamples": [
      true,
      [
        true,
        {
          "animations": 20,
          "styles": 8,
          "template": 5
        }
      ]
    ],
    "options": {
      "items": {
        "properties": {
          "animations": {
            "type": "number"
          },
          "styles": {
            "type": "number"
          },
          "template": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "maxLength": 1,
      "minLength": 0,
      "type": "array"
    },
    "optionsDescription": "\nIt can take an optional object with the properties 'animations', 'styles' and 'template':\n* `animations` - number > 0 defining the maximum allowed inline lines for animations. Defaults to 15.\n* `styles` - number > 0 defining the maximum allowed inline lines for styles. Defaults to 3.\n* `template` - number > 0 defining the maximum allowed inline lines for template. Defaults to 3.\n    ",
    "rationale": "Large, inline templates and styles obscure the component's purpose and implementation, reducing readability and maintainability.",
    "ruleName": "component-max-inline-declarations",
    "type": "maintainability",
    "typescriptOnly": true
  },
  {
    "description": "Component selectors should follow given naming rules.",
    "descriptionDetails": "\nSee more at https://angular.io/guide/styleguide#style-02-07, https://angular.io/guide/styleguide#style-05-02\nand https://angular.io/guide/styleguide#style-05-03.\n    ",
    "optionExamples": [
      [true, "element", "my-prefix", "kebab-case"],
      [true, "element", ["ng", "ngx"], "kebab-case"],
      [true, "attribute", "myPrefix", "camelCase"],
      [true, ["element", "attribute"], "myPrefix", "camelCase"]
    ],
    "options": {
      "items": [
        {
          "enum": ["attribute", "element"]
        },
        {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ]
        },
        {
          "enum": ["camelCase", "kebab-case"]
        }
      ],
      "maxLength": 3,
      "minLength": 3,
      "type": "array"
    },
    "optionsDescription": "\nOptions accept three obligatory items as an array:\n1. `element` or `attribute` forces components to be used as either elements, attributes, or both (not recommended)\n2. A single prefix (string) or array of prefixes (strings) which have to be used in component selectors.\n3. `kebab-case` or `camelCase` allows you to pick a case.\n    ",
    "rationale": "\n* Consistent conventions make it easy to quickly identify and reference assets of different types.\n* Makes it easier to promote and share the component in other apps.\n* Components are easy to identify in the DOM.\n* Keeps the element names consistent with the specification for Custom Elements.\n* Components have templates containing HTML and optional Angular template syntax.\n* They display content. Developers place components on the page as they would native HTML elements and WebComponents.\n* It is easier to recognize that a symbol is a component by looking at the template's HTML.\n    ",
    "ruleName": "component-selector",
    "type": "style",
    "typescriptOnly": true
  },
  {
    "description": "Ensures that classes use contextual decorators in its body.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "\nSome decorators should only be used in certain class types. For example,\nthe decorator @Input() should\nnot be used in a class decorated with @Injectable().\n    ",
    "ruleName": "contextual-decorator",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "Ensures that classes use allowed lifecycle method in its body.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "\nSome lifecycle methods can only be used in certain class types.\nFor example, ngOnInit() method should not be used\nin an @Injectable class.\n    ",
    "ruleName": "contextual-lifecycle",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "Classes decorated with @Directive must have suffix \"Directive\" (or custom) in their name.",
    "descriptionDetails": "See more at https://angular.io/styleguide#style-02-03.",
    "optionExamples": [true, [true, "Directive", "MySuffix"]],
    "options": {
      "items": {
        "type": "string"
      },
      "minLength": 0,
      "type": "array"
    },
    "optionsDescription": "Supply a list of allowed component suffixes. Defaults to \"Directive\".",
    "rationale": "Consistent conventions make it easy to quickly identify and reference assets of different types.",
    "ruleName": "directive-class-suffix",
    "type": "style",
    "typescriptOnly": true
  },
  {
    "description": "Directive selectors should follow given naming rules.",
    "descriptionDetails": "See more at https://angular.io/guide/styleguide#style-02-06 and https://angular.io/guide/styleguide#style-02-08",
    "optionExamples": [
      [true, "element", "my-prefix", "kebab-case"],
      [true, "element", ["ng", "ngx"], "kebab-case"],
      [true, "attribute", "myPrefix", "camelCase"],
      [true, ["element", "attribute"], "myPrefix", "camelCase"]
    ],
    "options": {
      "items": [
        {
          "enum": ["attribute", "element"]
        },
        {
          "oneOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ]
        },
        {
          "enum": ["camelCase", "kebab-case"]
        }
      ],
      "maxLength": 3,
      "minLength": 3,
      "type": "array"
    },
    "optionsDescription": "\nOptions accept three obligatory items as an array:\n1. `element` or `attribute` forces directives to be used as either elements, attributes, or both (not recommended)\n2. A single prefix (string) or array of prefixes (strings) which have to be used in directive selectors.\n3. `kebab-case` or `camelCase` allows you to pick a case.\n    ",
    "rationale": "\n* Consistent conventions make it easy to quickly identify and reference assets of different types.\n* Makes it easier to promote and share the directive in other apps.\n* Directives are easy to identify in the DOM.\n* Keeps the element names consistent with the specification for Custom Elements.\n* It is easier to recognize that a symbol is a directive by looking at the template's HTML.\n    ",
    "ruleName": "directive-selector",
    "type": "style",
    "typescriptOnly": true
  },
  {
    "description": "Ensures imports are consistent and tidy.",
    "hasFix": true,
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "Imports are easier for the reader to look at when they're tidy.",
    "ruleName": "import-destructuring-spacing",
    "type": "style",
    "typescriptOnly": true
  },
  {
    "description": "Disallows usage of @Attribute decorator.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "ruleName": "no-attribute-decorator",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "Ensures that directives not implement conflicting lifecycle interfaces.",
    "descriptionDetails": "See more at https://angular.io/api/core/DoCheck#description.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "\nA directive typically should not use both DoCheck and OnChanges to respond\nto changes on the same input, as ngOnChanges will continue to be called when the\ndefault change detector detects changes.\n    ",
    "ruleName": "no-conflicting-lifecycle",
    "type": "maintainability",
    "typescriptOnly": true
  },
  {
    "description": "Disallows usage of `forwardRef` references for DI.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "The flow of DI is disrupted by using `forwardRef` and might make code more difficult to understand.",
    "ruleName": "no-forward-ref",
    "type": "maintainability",
    "typescriptOnly": true
  },
  {
    "description": "Disallows usage of the `host` metadata property.",
    "descriptionDetails": "See more at https://angular.io/styleguide#style-06-03.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "\nIf you ever need to rename the property associated\nwith @HostBinding or the method associated\nwith @HostListener, you can modify it in a single place.\n    ",
    "ruleName": "no-host-metadata-property",
    "type": "style",
    "typescriptOnly": true
  },
  {
    "description": "Input names should not be prefixed by the configured disallowed prefixes.",
    "optionExamples": [[true, "can", "is", "should"]],
    "options": {
      "items": [
        {
          "type": "string"
        }
      ],
      "minLength": 1,
      "type": "array"
    },
    "optionsDescription": "Options accept a string array of disallowed input prefixes.",
    "rationale": "\nHTML attributes are not prefixed. It's considered best not to prefix Inputs.\n* Example: 'enabled' is prefered over 'isEnabled'.\n    ",
    "ruleName": "no-input-prefix",
    "type": "maintainability",
    "typescriptOnly": true
  },
  {
    "description": "Disallows renaming directive inputs by providing a string to the decorator.",
    "descriptionDetails": "See more at https://angular.io/styleguide#style-05-13.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "Two names for the same property (one private, one public) is inherently confusing.",
    "ruleName": "no-input-rename",
    "type": "maintainability",
    "typescriptOnly": true
  },
  {
    "description": "Disallows usage of the `inputs` metadata property.",
    "descriptionDetails": "See more at https://angular.io/styleguide#style-05-12.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "\n* It is easier and more readable to identify which properties in a class\nare inputs.\n* If you ever need to rename the property associated\nwith @Input, you can modify it in a single place.\n* The metadata declaration attached to the directive is shorter and thus more readable.\n    ",
    "ruleName": "no-inputs-metadata-property",
    "type": "style",
    "typescriptOnly": true
  },
  {
    "description": "Disallows explicit calls to lifecycle methods.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "Explicit calls to lifecycle methods could be confusing. Invoke them is an Angular's responsability.",
    "ruleName": "no-lifecycle-call",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "Disallows naming directive outputs as standard DOM event.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "Listeners subscribed to an output with such a name will also be invoked when the native event is raised.",
    "ruleName": "no-output-native",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "Name events without the prefix on.",
    "descriptionDetails": "See more at https://angular.io/guide/styleguide#dont-prefix-output-properties.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "Angular allows for an alternative syntax on-*. If the event itself was prefixed with on this would result in an on-onEvent binding expression.",
    "ruleName": "no-output-on-prefix",
    "type": "maintainability",
    "typescriptOnly": true
  },
  {
    "description": "Disallows renaming directive outputs by providing a string to the decorator.",
    "descriptionDetails": "See more at https://angular.io/styleguide#style-05-13.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "Two names for the same property (one private, one public) is inherently confusing.",
    "ruleName": "no-output-rename",
    "type": "maintainability",
    "typescriptOnly": true
  },
  {
    "description": "Disallows usage of the `outputs` metadata property.",
    "descriptionDetails": "See more at https://angular.io/styleguide#style-05-12.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "\n* It is easier and more readable to identify which properties in a class are events.\n* If you ever need to rename the event associated with @Output, you can modify it in a single place.\n* The metadata declaration attached to the directive is shorter and thus more readable.\n    ",
    "ruleName": "no-outputs-metadata-property",
    "type": "style",
    "typescriptOnly": true
  },
  {
    "description": "Disallows the declaration of impure pipes.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "Impure pipes should be avoided because they are invoked on each change-detection cycle.",
    "ruleName": "no-pipe-impure",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "Disallows usage of the `queries` metadata property.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "\nIf you ever need to rename the property associated\nwith @ContentChild,\n@ContentChildren, @ViewChild\nor @ViewChildren,\nyou can modify it in a single place.\n    ",
    "ruleName": "no-queries-metadata-property",
    "type": "style",
    "typescriptOnly": true
  },
  {
    "ruleName": "no-unused-css",
    "type": "maintainability",
    "description": "Disallows having an unused CSS rule in the component's stylesheet.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "typescriptOnly": true,
    "hasFix": true
  },
  {
    "description": "Enforce consistent prefix for pipes.",
    "optionExamples": [[true, "myPrefix"], [true, "myPrefix", "myOtherPrefix"]],
    "options": {
      "items": [
        {
          "type": "string"
        }
      ],
      "minLength": 1,
      "type": "array"
    },
    "optionsDescription": "\n* The list of arguments are supported prefixes (given as strings).\n    ",
    "rationale": "Consistent conventions make it easy to quickly identify and reference assets of different types.",
    "ruleName": "pipe-prefix",
    "type": "style",
    "typescriptOnly": true
  },
  {
    "description": "Ensures that declarations are on the same line as its decorator(s).",
    "descriptionDetails": "See more at https://angular.io/guide/styleguide#style-05-12.",
    "optionExamples": [
      true,
      [
        true,
        {
          "methods": false
        }
      ],
      [
        true,
        {
          "getters": {
            "safelist": ["Input"]
          },
          "methods": true,
          "parameter-properties": false,
          "parameters": false,
          "properties": {
            "safelist": ["Output", "MyCustomDecorator"]
          },
          "setters": true
        }
      ]
    ],
    "options": {
      "additionalProperties": false,
      "properties": {
        "getters": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              "type": "object"
            }
          ]
        },
        "methods": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              "type": "object"
            }
          ]
        },
        "parameter-properties": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              "type": "object"
            }
          ]
        },
        "parameters": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              "type": "object"
            }
          ]
        },
        "properties": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              "type": "object"
            }
          ]
        },
        "setters": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "properties": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              "type": "object"
            }
          ]
        }
      },
      "type": "object"
    },
    "optionsDescription": "\nAn optional object with optional `getters`, `methods`, `parameter-properties`, `parameters`, `properties` and `setters` properties.\n\nThe properties can be specifed as booleans or as objects with the property `safelist` containing the names of the decorators that should be ignored. Note that if a declaration is decorated with multiple decorators and at least one of them is present in `safelist`, this declaration is ignored.\n\n* `getters` - requires that getters are on the same line as its decorator(s). Defaults to `true`.\n* `methods` - requires that methods are on the same line as its decorator(s). Defaults to `true`.\n* `parameter-properties` - requires that parameter properties are on the same line as its decorator(s). Defaults to `true`.\n* `parameters` - requires that parameters are on the same line as its decorator(s). Defaults to `true`.\n* `properties` - requires that properties are on the same line as its decorator(s). Defaults to `true`.\n* `setters` - requires that setters are on the same line as its decorator(s). Defaults to `true`.\n    ",
    "rationale": "Placing the decorator on the same line usually makes for shorter code and still easily identifies the declarations.",
    "ruleName": "prefer-inline-decorator",
    "type": "style",
    "typescriptOnly": true
  },
  {
    "description": "Enforces component's change detection to ChangeDetectionStrategy.OnPush.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "\nBy default Angular uses the ChangeDetectionStrategy.Default.\n\nThis strategy doesn’t assume anything about the application, therefore every time something changes in our application, as a result of various user events, timers, XHR, promises, etc., a change detection will run on all components.\n\nBy using ChangeDetectionStrategy.OnPush, Angular will only run the change detection cycle in the following cases:\n* Inputs references change.\n* An event originated from the component or one of its children.\n* If manually called.\n    ",
    "ruleName": "prefer-on-push-component-change-detection",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "Prefer to declare `@Output` as readonly since they are not supposed to be reassigned.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "ruleName": "prefer-output-readonly",
    "type": "maintainability",
    "typescriptOnly": true
  },
  {
    "description": "The ./ prefix is standard syntax for relative URLs; don't depend on Angular's current ability to do without that prefix.",
    "descriptionDetails": "See more at https://angular.io/styleguide#style-05-04.",
    "rationale": "A component relative URL requires no change when you move the component files, as long as the files stay together.",
    "ruleName": "relative-url-prefix",
    "options": null,
    "optionsDescription": "Not configurable.",
    "type": "maintainability",
    "typescriptOnly": true
  },
  {
    "description": "Enforces alternate text for elements which require the alt, aria-label, aria-labelledby attributes",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "Alternate text lets screen readers provide more information to end users.",
    "ruleName": "template-accessibility-alt-text",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "Ensures that the heading, anchor and button elements have content in it",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "Heading, anchor and button elements should have content to be accessible by screen readers",
    "ruleName": "template-accessibility-elements-content",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "Checks if a label component is associated with a form element",
    "optionExamples": [
      true,
      [
        true,
        {
          "controlComponents": ["app-input"]
        }
      ],
      [
        true,
        {
          "controlComponents": ["app-input", "app-select"],
          "labelAttributes": ["id"],
          "labelComponents": ["app-label"]
        }
      ]
    ],
    "options": {
      "additionalProperties": false,
      "properties": {
        "controlComponents": {
          "properties": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "type": "object"
        },
        "labelAttributes": {
          "properties": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "type": "object"
        },
        "labelComponents": {
          "properties": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "optionsDescription": "\nAn optional object with optional `controlComponents`, `labelAttributes` and `labelComponents` properties.\n\n* `controlComponents` - components that must be inside a label component. Default and non overridable values are\n\"button\", \"input\", \"meter\", \"output\", \"progress\", \"select\" and \"textarea\".\n* `labelAttributes` - attributes that must be set on label components. Default and non overridable values are\n\"for\" and \"htmlFor\".\n* `labelComponents` - components that act like a label. Default and non overridable values are\n\"label\".\n    ",
    "ruleName": "template-accessibility-label-for",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "Ensures that the tabindex attribute is not positive",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "positive values for tabindex attribute should be avoided because they mess up with the order of focus (AX_FOCUS_03)",
    "ruleName": "template-accessibility-tabindex-no-positive",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "Ensures that scope is not used on any element except th",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "\nThe scope attribute makes table navigation much easier for screen reader users, provided that it is used correctly.\nIf used incorrectly, it can make table navigation much harder and less efficient. (aXe)\n",
    "ruleName": "template-accessibility-table-scope",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "Ensures that the correct ARIA attributes are used",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "Elements should not use invalid aria attributes (AX_ARIA_11)",
    "ruleName": "template-accessibility-valid-aria",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "Ensures that the two-way data binding syntax is correct.",
    "hasFix": true,
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "The parentheses \"()\" should have been inside the brackets \"[]\".",
    "ruleName": "template-banana-in-box",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "Ensures that the click event is accompanied with at least one key event keyup, keydown or keypress",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "Keyboard is important for users with physical disabilities who cannot use mouse.",
    "ruleName": "template-click-events-have-key-events",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "The condition complexity shouldn't exceed a rational limit in a template.",
    "optionExamples": [true, [true, 4]],
    "options": {
      "items": {
        "type": "string"
      },
      "maxLength": 1,
      "minLength": 0,
      "type": "array"
    },
    "optionsDescription": "Determine the maximum number of Boolean operators allowed.",
    "rationale": "An important complexity complicates the tests and the maintenance.",
    "ruleName": "template-conditional-complexity",
    "type": "maintainability",
    "typescriptOnly": true
  },
  {
    "description": "Checks cyclomatic complexity against a specified limit. It is a quantitative measure of the number of linearly independent paths through a program's source code",
    "optionExamples": [true, [true, 6]],
    "options": {
      "items": {
        "type": "string"
      },
      "maxLength": 1,
      "minLength": 0,
      "type": "array"
    },
    "optionsDescription": "Determine the maximum number of the cyclomatic complexity.",
    "rationale": "Cyclomatic complexity over some threshold indicates that the logic should be moved outside the template.",
    "ruleName": "template-cyclomatic-complexity",
    "type": "maintainability",
    "typescriptOnly": true
  },
  {
    "description": "Ensures following best practices for i18n.",
    "optionExamples": [[true, "check-id"], [true, "check-text"], [true, "check-id", "check-text"]],
    "options": {
      "items": {
        "enum": ["check-id", "check-text"],
        "type": "string"
      },
      "maxLength": 2,
      "minLength": 1,
      "type": "array"
    },
    "optionsDescription": "\nOne (or both) of the following arguments must be provided:\n* `check-id` Makes sure i18n attributes have ID specified\n* `check-text` Makes sure there are no elements with text content but no i18n attribute\n    ",
    "rationale": "Makes the code more maintainable in i18n sense.",
    "ruleName": "template-i18n",
    "type": "maintainability",
    "typescriptOnly": true
  },
  {
    "description": "Ensures that the Mouse Events mouseover and mouseout are accompanied with Key Events focus and blur",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "Keyboard is important for users with physical disabilities who cannot use mouse.",
    "ruleName": "template-mouse-events-have-key-events",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "Disallows using '$any' in templates.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "\nThe use of '$any' nullifies the compile-time\nbenefits of the Angular's type system.\n    ",
    "ruleName": "template-no-any",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "Ensure that autofocus property is not used",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "autofocus attribute reduces usability and accessibility for users.",
    "ruleName": "template-no-autofocus",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "Disallows calling expressions in templates, except for output handlers.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "Calling expressions in templates causes it to run on every change detection cycle and may cause performance issues.",
    "ruleName": "template-no-call-expression",
    "type": "maintainability",
    "typescriptOnly": true
  },
  {
    "description": "Enforces that no distracting elements are used",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "Elements that can be visually distracting can cause accessibility issues with visually impaired users.",
    "ruleName": "template-no-distracting-elements",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "Ensures that strict equality is used when evaluating negations on async pipe output.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "\nAngular's async pipes emit null initially, prior to the observable emitting any values, or the promise resolving. This can cause negations, like\n*ngIf=\"!(myConditional | async)\" to thrash the layout and cause expensive side-effects like firing off XHR requests for a component which should not be shown.\n    ",
    "ruleName": "template-no-negated-async",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "Ensures trackBy function is used.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "The use of 'trackBy' is considered a good practice.",
    "ruleName": "template-use-track-by-function",
    "type": "maintainability",
    "typescriptOnly": true
  },
  {
    "description": "Component selector must be declared.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "Omit the component selector makes debugging difficult.",
    "ruleName": "use-component-selector",
    "type": "maintainability",
    "typescriptOnly": true
  },
  {
    "description": "Disallows using ViewEncapsulation.None.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "ruleName": "use-component-view-encapsulation",
    "type": "maintainability",
    "typescriptOnly": true
  },
  {
    "description": "Enforces classes decorated with @Injectable to use the 'providedIn' property.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "Using the 'providedIn' property makes classes decorated with @Injectable tree shakeable.",
    "ruleName": "use-injectable-provided-in",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "Ensures classes implement lifecycle interfaces corresponding to the declared lifecycle methods.",
    "descriptionDetails": "See more at https://angular.io/styleguide#style-09-01",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "Interfaces prescribe typed method signatures. Use those signatures to flag spelling and syntax mistakes.",
    "ruleName": "use-lifecycle-interface",
    "type": "functionality",
    "typescriptOnly": true
  },
  {
    "description": "\nEnsures that classes implementing PipeTransform interface\nuse @Pipe decorator.\n    ",
    "options": null,
    "optionsDescription": "Not configurable.",
    "ruleName": "use-pipe-decorator",
    "type": "maintainability",
    "typescriptOnly": true
  },
  {
    "description": "Ensures that classes decorated with @Pipe implement PipeTransform interface.",
    "options": null,
    "optionsDescription": "Not configurable.",
    "rationale": "Interfaces prescribe typed method signatures. Use those signatures to flag spelling and syntax mistakes.",
    "ruleName": "use-pipe-transform-interface",
    "type": "maintainability",
    "typescriptOnly": true
  }
]
